//  MkThumbNails - makes image thumbnail files for your web browser
//  Copyright (C) 2013  Lance Arsenault, AGPL(3)

// This file is part of MkThumbnails

// MkThumbNails is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License (AGPL)
// as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.

// MkThumbNails is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License at <http://www.gnu.org/licenses/>.

//////////////////////////////////////////////////////////////////////

// This is the javaScript that can be used to view the images
// that are indexed with thumbnail icons on a web page.
// The web page file and thumbnail images should be generated by
// the program MkThumbnails.rb.
// This JavaScript is optional.  The page will work without this
// javaScript by linking thumbnail icons to seperate veiw HTML pages.
// This JavaScript lets you view the larger versions of the images
// in a single (same) page.


// TODO: add a watch cursor for when images are slow to download
// TODO: add ablity to set view image size using html and CSS <img> 
// width and/or height attributes.

tmpCoverDiv = false;

viewDiv = false;
debug = false;
AutoScroll = true;

// imgSmallness is numberOfThumbs-1, numberOfThumbs-2, ..., 0, -1 (full size)
imgSmallness = false;


/*
function GetYPos(el)
{
    var y = 0;
    while( el && !isNaN( el.offsetLeft ) && !isNaN( el.offsetTop ) ) {
        y += el.offsetTop - el.scrollTop;
        el = el.offsetParent;
    }
    return y;
}
*/

// puts down an overlay page so the user can't click
// any thing until all the removeOverlay() is called.
// addOverlay() is called before the onload
function addOverlay(numIcons)
{
  tmpCoverDiv = document.createElement('div');
  tmpCoverDiv.style.zIndex = '10';
  tmpCoverDiv.style.position = 'fixed';
  tmpCoverDiv.style.opacity = '0.7';
  tmpCoverDiv.style.backgroundColor = '#223';
  tmpCoverDiv.style.top = '0px';
  tmpCoverDiv.style.left = '0px';
  tmpCoverDiv.style.width = '100%';
  tmpCoverDiv.style.height = '100%';
  tmpCoverDiv.style.textAlign = 'center';
  tmpCoverDiv.style.color = '#500';
  var p = document.createElement('div');
  p.style.position = 'absolute';
  p.style.width = '60%';
  p.style.left = '20%';
  p.style.top = '10%';
  p.style.height = '60%';
  p.style.padding = '30px';
  p.style.fontSize = '300%';
  //p.style.textAlign = 'center';
  p.style.backgroundColor = '#A99';
  tmpCoverDiv.appendChild(p);
  p.appendChild(document.createTextNode('Loading ' + numIcons + ' Icons ...'));
  document.body.appendChild(tmpCoverDiv);
}


function removeOverlay()
{
  if(tmpCoverDiv)
  {
    document.body.removeChild(tmpCoverDiv);
    tmpCoverDiv = false;
  }
}

function ScrollToViewDiv()
{
  // We've tried many methods to keep the page
  // scrolled at the image of interest.
  // What seems to work is to set the img.onload
  // callback to this function, like:
  // viewDiv.Img.onload = ScrollToViewDiv;

  if(viewDiv)
    // This seems to work on firefox on Debian
    viewDiv.scrollIntoView(true);

  //location.href = '#'; // work around for WebKit??
  //location.href = '#IMG'; // buggy shit
  // viewDiv.scrollTop = '0px';
  //var y = GetYPos(viewDiv);
  //alert('GetYPos(viewDiv)= ' + y);
  //window.scrollTo(0,y);
  //y = GetYPos(viewDiv);
  //alert('GetYPos(viewDiv)= ' + y);
  //window.scrollTo(0,y);

  //window.scrollTo(0,0);
  //window.scrollBy(0,y);
}

function GetArgs()
{
    var arg = false;
    var str = window.location.toString();
    var args = str.search(/\?/);
    if(args != -1)
    {
        arg = [];
        var args = str.substr(args + 1).split('&');
        var i;
        for(i=0; i < args.length; ++i)
            arg[i] = args[i].split('=');
    }
    return arg;
}

function EnlargeViewImg()
{
    --imgSmallness;
    if(imgSmallness == -1)
    {
        this.onclick = null;
        this.className = 'topbutton';
        viewDiv.ShrinkSpan.focus();
        this.tabIndex = null;
    }
    else if(imgSmallness == numberOfThumbs-2)
    {
        viewDiv.ShrinkSpan.onclick = ShrinkViewImg;
        viewDiv.ShrinkSpan.tabIndex = 0;
        viewDiv.ShrinkSpan.className = 'topbutton nav';
    }
    setViewImg(viewDiv.LastIcon);

    //if(imgSmallness != -1)
    //    this.focus();
    //else
    //    viewDiv.ShrinkSpan.focus();
}

function ShrinkViewImg()
{
    ++imgSmallness;
    if(imgSmallness == numberOfThumbs - 1)
    {
        this.onclick = null;
        this.className = 'topbutton';
        viewDiv.EnlargeSpan.focus();
        this.tabIndex = null;
    }
    else if(imgSmallness == 0)
    {
        viewDiv.EnlargeSpan.onclick = EnlargeViewImg;
        viewDiv.EnlargeSpan.tabIndex = 0;
        viewDiv.EnlargeSpan.className = 'topbutton nav';
    }
    setViewImg(viewDiv.LastIcon);

    //if(imgSmallness != numberOfThumbs -1)
    //    this.focus();
    //else
    //    viewDiv.EnlargeSpan.focus();
}

function fetchCaption(url, img)
{
  try {
    var req = new XMLHttpRequest();
    req.onreadystatechange = function()
    {
      if(img == viewDiv.Img)
      {
        if(this.readyState==4)
        {
          viewDiv.Imgdiv.className = 'imgcaption';
          viewDiv.Imgdiv.innerHTML =
            viewDiv.Img.outerHTML + ' ' + this.responseText;
        }
      }
      else
        viewDiv.Imgdiv.innerHTML =
            viewDiv.Img.outerHTML + ' ' +
            '<p> failed to get caption at URL ' +
            url + "<p>\n";
    }
    req.open("GET", url, true);
    req.send(null);
  }
  catch(e) {
    alert(e);
  }
}

function setViewImg(iconImg)
{
    var srcType = '.' + iconImg.src.replace(/^.*\./g, '');
    var srcPrefix = iconImg.src.replace(
        new RegExp(
            thumbFileSuffix +
            (numberOfThumbs-1).toString() +
            '\\' + srcType + '$'
        ), '');

    //alert('prefix=' + srcPrefix + '  root=' + viewDiv.URLRoot);\
    if(AutoScroll)
        viewDiv.Img.onload = ScrollToViewDiv;
    else
        viewDiv.Img.onload = null;

    if(imgSmallness >= 0)
        viewDiv.Img.src = srcPrefix + thumbFileSuffix +
            imgSmallness.toString() + srcType;
    else
        viewDiv.Img.src =  srcPrefix + srcType;

    var key = srcPrefix.replace(viewDiv.URLRoot, '');
    
    // Initialize image html stuff
    viewDiv.Imgdiv.className = 'img';
    viewDiv.Imgdiv.innerHTML = viewDiv.Img.outerHTML;

    //alert(key + '  ' + viewDiv.URLRoot);
    
    if(caption && caption[key])
      fetchCaption(caption[key], viewDiv.Img);


    if( debug )
    {
        // Add text that has the this Href
        if( debug === true )
        {
            var div = document.createElement('div');
            viewDiv.appendChild(div);
            var span = document.createElement('span');
            div.appendChild(span);
            debug = document.createTextNode('Full Size: ' + srcPrefix + srcType);
            span.appendChild(debug);
        }
        else
            debug.data = 'Full Size: ' + srcPrefix + srcType;

        //alert(viewDiv.innerHTML);
    }
}

function SpanOnclick()
{
    this.Img.onclick();
    this.focus();
}

function closeView()
{
    if(!viewDiv) return;

    viewDiv.style.display = 'none';
    viewDiv.LastIcon.style.display = 'inline-block';
    onkeyup = null;
    if(viewDiv.LastIcon.onclick)
    {
        viewDiv.LastIcon.focus();
    }
    else
    {
        var a = document.body.firstChild;
        while(a && a.nodeName != 'A' && a.firstChild.nodeName != 'IMG')
            a = a.nextSibling;
        if(a)
            a.focus();
    }
        
}

function SetupSpanOnclick(span, img, title)
{
    if(img)
    {
        span.onclick = SpanOnclick;
        span.Img = img;
        span.title = title;
        span.className = 'topbutton nav';
        // firefox bug: messes with cursor
        // in the nav class
        span.style.cursor = 'pointer';
    }
    else
    {
        span.removeAttribute('title');
        span.onclick = null;
        span.style.cursor = 'inherit';
        span.className = 'topbutton';
    }
}

// Utility function
// for expample: span.onkeypress = Util_Enter2Click;
// turns <enter> key press into a click event
// for the span element.

function Util_Enter2Click(ev, obj)
{
    if(typeof obj === 'undefined')
        var obj = this;

    if(ev.keyCode == 13)// enter key
    {
        obj.SimulatedClick = true;
        obj.click();
        delete(obj.SimulatedClick);
        ev.stopPropagation();
        return false; // handled
    }

    if(obj.OtherKeypress)
        return obj.OtherKeypress(ev);

    return true; // pass event on
}

function ImgIconOnclick()
{
    if(viewDiv)
    {
        viewDiv.LastIcon.style.display = 'inline-block';
    }
    else
    {
        viewDiv = document.createElement('div');

        viewDiv.URLRoot = window.location.toString().replace(/\?.*$/, '').replace(/[^\/]*$/g, '');

        //alert(viewDiv.URLRoot);

        var div = document.createElement('div');
        div.id = 'IMG';

        var span = viewDiv.PrevSpan = document.createElement('span');
        span.appendChild(document.createTextNode('< '));
        var sspan = document.createElement('span');
        sspan.style.textDecoration = 'underline';
        sspan.style.fontWeight = 'bold';
        sspan.appendChild(document.createTextNode('P'));
        span.appendChild(sspan);
        span.appendChild(document.createTextNode('revious'));
        div.appendChild(span);
        span.tabIndex = 0;
        span.onkeypress = Util_Enter2Click;


        span = viewDiv.ShrinkSpan = document.createElement('span');
        sspan = document.createElement('span');
        sspan.style.textDecoration = 'underline';
        sspan.style.fontWeight = 'bold';
        sspan.appendChild(document.createTextNode('S'));
        span.appendChild(sspan);
        span.appendChild(document.createTextNode('hrink'));
        div.appendChild(span);
        span.className = 'topbutton';
        if(imgSmallness < numberOfThumbs - 1)
        {
            span.onclick = ShrinkViewImg;
            span.className = 'topbutton nav';
        }
        span.tabIndex = 0;
        span.onkeypress = Util_Enter2Click;


        span = viewDiv.EnlargeSpan = document.createElement('span');
        sspan = document.createElement('span');
        sspan.style.textDecoration = 'underline';
        sspan.style.fontWeight = 'bold';
        sspan.appendChild(document.createTextNode('E'));
        span.appendChild(sspan);
        span.appendChild(document.createTextNode('nlarge'));
        div.appendChild(span);
        span.className = 'topbutton';
        if(imgSmallness > -1)
        {
            span.onclick = EnlargeViewImg;
            span.className = 'topbutton nav';
        }
        span.tabIndex = 0;
        span.onkeypress = Util_Enter2Click;


        span = viewDiv.NextSpan = document.createElement('span');
        sspan = document.createElement('span');
        sspan.style.textDecoration = 'underline';
        sspan.style.fontWeight = 'bold';
        sspan.appendChild(document.createTextNode('N'));
        span.appendChild(sspan);
        span.appendChild(document.createTextNode('ext >'));
        div.appendChild(span);
        span.tabIndex = 0;
        span.onkeypress = Util_Enter2Click;


        div.style.paddingTop = '10px';
        viewDiv.appendChild(div);


 
        div = document.createElement('div');

        viewDiv.Img = document.createElement('img');
        viewDiv.Img.className = 'viewer';
        div.className = 'img';

        div.appendChild(viewDiv.Img);

        viewDiv.appendChild(div);
        viewDiv.Imgdiv = div;



        div = document.createElement('div');
        viewDiv.appendChild(div);

        span = viewDiv.CloseSpan = document.createElement('span');
        sspan = document.createElement('span');
        sspan.style.textDecoration = 'underline';
        sspan.style.fontWeight = 'bold';
        sspan.appendChild(document.createTextNode('C'));
        span.appendChild(sspan);
        span.appendChild(document.createTextNode('lose view'));
        div.appendChild(span);
        span.className = 'bottombutton nav';
        span.onclick = closeView;
        span.style.fontSize = '%120';
        span.tabIndex = 0;
        span.onkeypress = Util_Enter2Click;
       

        div.style.paddingBottom = '10px';
        div.style.clear = 'both';
        viewDiv.appendChild(div);


        var style = viewDiv.style;
        style.borderWidth = '1px';
        style.borderStyle = 'solid';
        style.borderColor = '#555';
        // Firefox bug renders borderRadius wrong.
        //style.borderRadius = '16px';
        style.paddingTop = '8px';
        style.paddingBottom = '8px';
        style.paddingLeft = '4px';
        style.paddingRight = '4px';
        style.margin = '0px';
        style.textAlign = 'center';
        style.marginTop = '6px';
        style.marginBottom = '6px';
    }

    viewDiv.style.display = 'block';
    viewDiv.LastIcon = this;

    var p = this.parentNode;
    p.insertBefore(viewDiv, this);
    this.style.display = 'none';


    // find next img icon
    var img = this.nextSibling;
    while(img && img.nodeName != 'IMG')
        img = img.nextSibling;
    SetupSpanOnclick(viewDiv.NextSpan, img, 'next');

    // find previous img icon
    img = this.previousSibling;
    while(img && img.nodeName != 'IMG')
        img = img.previousSibling;
    SetupSpanOnclick(viewDiv.PrevSpan, img, 'previous');

    onkeyup = function (ev) {
        var k = ev.keyCode;
        //alert('got keyCode = ' + ev.keyCode);
        //    r-arrow      f
        if(k == 39 || k == 70 ||
        //      j          l          n
           k == 74 || k == 76 || k == 78)
        {
            if(viewDiv.NextSpan.onclick)
                viewDiv.NextSpan.onclick();
            return false; // eat event
        }
        //     backspace      h           b
        else if(k == 8 || k == 72 || k == 66 ||
        //       k      l-arrow        p
            k == 75 || k == 37 || k == 80)
        {
            if(viewDiv.PrevSpan.onclick)
                viewDiv.PrevSpan.onclick();
            return false; // eat event
        }
        //           c              q
        else if(k == 67 || k == 81)
        {
            viewDiv.CloseSpan.onclick();
            return false;
        }
        //            e            +       =
        else if(k == 69 || k == 62 || k == 61)
        {
            if(viewDiv.EnlargeSpan.onclick)
                viewDiv.EnlargeSpan.onclick();
            return false;
        }
        //            s        - or _
        else if(k == 83 || k == 173)
        {
            if(viewDiv.ShrinkSpan.onclick)
                viewDiv.ShrinkSpan.onclick();
            return false;
        }


        return true; // pass event on
    };

    if(viewDiv.NextSpan.onclick)
        viewDiv.NextSpan.focus();
    else if(viewDiv.PrevSpan.onclick)
        viewDiv.PrevSpan.focus();
    else
        viewDiv.EnlargeSpan.focus();

    setViewImg(this);
}

function DisableAutoScroll()
{
    AutoScroll = false;
    this.firstChild.data = 'enable auto scolling to viewer';
    this.onclick = EnableAutoScroll;
}

function EnableAutoScroll()
{
    this.firstChild.data = 'disable auto scolling to viewer';
    this.onclick = DisableAutoScroll;
    AutoScroll = true;
}

function DisableViewing()
{
    Viewing = false;
    this.firstChild.data = 'enable javaScript inline viewing';
    this.onclick = EnableViewing;

    var img = document.body.firstChild;

    while(img)
    {
        while(img && !img.Href)
            img = img.nextSibling;
        if(!img) break;

        var p = img.parentNode;
        var a = document.createElement('a');
        a.href = img.Href;
        var next = img.nextSibling;
        p.insertBefore(a, img);
        a.appendChild(img);
        delete img.tabIndex;
        img.onkeypress = null;
        img = next;
    }


    closeView();
    window.scrollTo(0, 0);

    if(localStorage)
        localStorage.MkThumbnails_javaScriptOff = 'true';
}


function EnableViewing()
{
    Viewing = true; 
    var a = document.body.firstChild;

    while(a)
    {
        while(a && a.nodeName != 'A')
            a = a.nextSibling;
        if(!a || a.nodeName != 'A') break;

        var img = a.firstChild;
        while(img && img.nodeName != 'IMG')
            img = img.nextSibling;
        if(!img || img.nodeName != 'IMG')
        {
            a = a.nextSibling;
            continue;
        }

        var next = a.nextSibling;
        
        var p = a.parentNode;
        p.insertBefore(img, a);
    
        img.title = 'view';
        img.onclick = ImgIconOnclick;
        img.style.cursor = 'pointer';
        img.style.display = 'inline-block';
        img.Href = a.href;
        img.tabIndex = 0;
        img.onkeypress = Util_Enter2Click;
        p.removeChild(a);

        a = next;
    }

    this.onclick = DisableViewing;
    this.firstChild.data = 'disable javaScript inline viewing';

    if(localStorage && localStorage.MkThumbnails_javaScriptOff)
        delete localStorage.MkThumbnails_javaScriptOff;
}

function MkThumbnails_Setup()
{
    if(!window.hasOwnProperty('caption'))
      caption = false; // no caption files to load

    // configuration
    imgSmallness = numberOfThumbs-2;

    var n = document.body.firstChild;

    while(n && n.nodeName != 'H1')
        n = n.nextSibling;
    if(n) n = n.nextSibling;
    if(!n)
    {
        alert('Cannot find H1 tag');
        removeOverlay();
        return;
    }

    // Add nav style rules
    var style = document.createElement('style');
    style.type = 'text/css';
    var s = "\n" +
        "  span.nav { color: #01D;\n" +
        "             cursor: pointer;\n" +
        "  }\n" +
        "  span.nav:hover { color: #59D; }\n" +
        "  span.nav:focus { color: #5FF; }\n" +
        "  span.nav:active { color: #8DD; }\n";
        

    if (style.styleSheet) css.styleSheet.cssText = s;
    else style.appendChild(document.createTextNode(s));
    document.getElementsByTagName("head")[0].appendChild(style);



    var div = document.createElement('div');
    div.style.paddingBottom = '10px';
    div.style.fontSize = '90%';
    

    var span = document.createElement('span');
    span.className = 'nav';
    span.onclick = DisableAutoScroll;
    span.appendChild(document.createTextNode('disable auto scolling to viewer'));
    span.tabIndex = 0;
    span.onkeypress = Util_Enter2Click;
    span.style.borderColor = '#000';
    span.style.borderWidth = '1px';
    span.style.borderStyle = 'solid';
    div.appendChild(span);

    div.appendChild(document.createTextNode(' '));

    span = document.createElement('span');
    span.className = 'nav';
    span.onclick = EnableViewing;
    span.appendChild(document.createTextNode('enable javaScript inline viewing'));
    span.tabIndex = 0;
    span.onkeypress = Util_Enter2Click;
    span.style.borderColor = '#000';
    span.style.borderWidth = '1px';
    span.style.borderStyle = 'solid';
    div.appendChild(span);
 

    n.parentNode.insertBefore(div, n);

    // It would appear that firefox localStorage cannot store booleans
    // and can store strings.
    if(!localStorage || localStorage.MkThumbnails_javaScriptOff != 'true')
        span.onclick();


    ////////////////////////////////////////////////////////
    //    parse ARGS
    ///////////////////////////////////////////////////////

    var args = GetArgs();
    var img_path = false;
    var arg;

    // For now we turn on debug
    debug = true;

    while(args && (arg = args.shift()))
    {
        if(arg[1])
            img_path = arg[1];
        else if(arg[0] === 'debug' || arg[0] === 'verbose')
            debug = true;
        else if(arg[0] && !img_path)
            img_path = arg[0];
    }
    if(!img_path)
    {
      removeOverlay();
      return;
    }

    //alert('got img path=' + img_path);

    var href_len = img_path.length;

    // Find the img to click
    var img = document.body.firstChild;
    while(img)
    {
        while(img && img.nodeName != 'IMG')
            img = img.nextSibling;
        if(!img || img.nodeName != 'IMG') break;
        var len = img.Href.length;
        if(len >= href_len && img.Href.substr(len-href_len) === img_path)
        {
            img.click();
            break;
        }
        img = img.nextSibling;
    }

    removeOverlay();
}

